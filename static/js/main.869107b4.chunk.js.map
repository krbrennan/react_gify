{"version":3,"sources":["Card.js","CardList.js","HeaderBar.js","SearchBar.js","SearchBox.js","CurrentlyViewing.js","App.js","registerServiceWorker.js","index.js"],"names":["Card","props","url","className","src","embed_url","key","id","CardList","cards","map","user","i","header","Scroll","style","overflow","height","children","SearchBox","handleChange","bind","submitHandler","state","input","event","preventDefault","this","handlerFromParent","setState","target","value","persist","onSubmit","type","placeholder","onChange","Component","CurrentlyViewing","searchedTerm","current","toUpperCase","App","handler","gifs","searchField","searched","request","get","err","res","body","data","withCredentials","length","HeaderBar","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"uVAYeA,G,MATF,SAACC,GACZ,IAAMC,EAAMD,EACZ,OACE,yBAAKE,UAAU,+CACb,4BAAQA,UAAU,YAAYC,IAAKF,EAAIG,UAAWC,IAAKJ,EAAIK,QCWlDC,EAdE,SAACP,GAChB,OACE,yBAAKE,UAAU,MAEXF,EAAMQ,MAAMC,KAAI,SAACC,EAAMC,GACrB,OAAO,kBAAC,EAAD,CACPN,IAAKK,EAAKJ,GACVF,UAAWM,EAAKN,iBCGXQ,G,MATA,WAEb,OACI,yBAAKV,UAAU,aACb,wBAAIA,UAAU,kBAAd,kBCGOW,EATA,SAACb,GACd,OACE,yBAAKc,MAAO,CAACC,SAAU,SAAUC,OAAQ,SACtChB,EAAMiB,SADT,MCyCWC,G,wDAxCb,WAAYlB,GAAQ,IAAD,8BACjB,cAAMA,IACDmB,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBAErB,EAAKE,MAAQ,CACXC,MAAO,IANQ,E,0DAULC,GACZA,EAAMC,iBACNC,KAAK1B,MAAM2B,kBAAkBD,KAAKJ,MAAMC,S,mCAG7BC,GACXE,KAAKE,SAAS,CACZL,MAAOC,EAAMK,OAAOC,QAEtBN,EAAMC,iBACND,EAAMO,Y,+BAKN,OACI,0BAAMC,SAAUN,KAAKL,cAAenB,UAAU,iBAC5C,2BACE+B,KAAK,OACL3B,GAAG,WACH4B,YAAY,eACZhC,UAAU,uDACViC,SAAUT,KAAKP,oB,GAjCHiB,cCcTC,EAhBU,SAACrC,GACxB,IAAIsC,EAAe,KAOnB,OALEA,EADmB,KAAlBtC,EAAMuC,QACQ,WAEAvC,EAAMuC,QAIrB,6BACE,uBAAGrC,UAAU,kBAAkBoC,EAAaE,iBCsDnCC,G,wDAxDX,WAAYzC,GAAQ,IAAD,8BACjB,cAAMA,IACD0C,QAAU,EAAKA,QAAQtB,KAAb,gBACf,EAAKE,MAAQ,CACXqB,KAAM,GACNC,YAAa,GACbC,UAAU,GANK,E,gEAUI,IAAD,OAClB,IAA2B,IAAxBnB,KAAKJ,MAAMuB,SAAoB,CAGhCC,IACCC,IAHW,qGAGF,SAACC,EAAKC,GACd,EAAKrB,SAAS,CAACe,KAAMM,EAAIC,KAAKC,UAE/BC,qB,8BAKCD,GAAO,IAAD,OACZzB,KAAKE,SAAS,CACZgB,YAAaO,EACbN,UAAU,IAEZ,IACM5C,EAAG,iDADUkD,EACV,+DAETL,IACGC,IAAI9C,GAAK,SAAC+C,EAAKC,GACd,EAAKrB,SAAS,CAACe,KAAKM,EAAIC,KAAKC,UAE9BC,kBACH1B,KAAKE,SAAS,CAACiB,UAAS,M,+BAIxB,OAA8B,IAA3BnB,KAAKJ,MAAMqB,KAAKU,OACV,KAGP,yBAAKnD,UAAU,QACb,kBAACoD,EAAD,MACA,kBAAC,EAAD,CAAW3B,kBAAmBD,KAAKgB,UACnC,kBAAC,EAAD,CAAkBH,QAASb,KAAKJ,MAAMsB,cACtC,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUpC,MAAOkB,KAAKJ,MAAMqB,a,GAlDpBP,cCAdmB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB/C,QACfyC,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,MCxEjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDalC,WACb,GAA6C,kBAAmBjB,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,cAAwBzB,OAAOC,UAC3CyB,SAAW1B,OAAOC,SAASyB,OAIvC,OAGF1B,OAAO2B,iBAAiB,QAAQ,WAC9B,IAAMtB,EAAK,UAAMoB,cAAN,sBAEP3B,IAiDV,SAAiCO,GAE/BuB,MAAMvB,GACHI,MAAK,SAAAoB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQzC,IAAI,gBAAgB0C,QAAQ,cAG7C1B,UAAUC,cAAc0B,MAAMxB,MAAK,SAAAC,GACjCA,EAAawB,aAAazB,MAAK,WAC7BT,OAAOC,SAASkC,eAKpB/B,EAAgBC,MAGnBa,OAAM,WACLF,QAAQC,IACN,oEArEAmB,CAAwB/B,GAIxBC,UAAUC,cAAc0B,MAAMxB,MAAK,WACjCO,QAAQC,IACN,gHAMJb,EAAgBC,OCxCxBgC,K","file":"static/js/main.869107b4.chunk.js","sourcesContent":["import React from 'react';\nimport './card.css';\n\nconst Card = (props) => {\n  const url = props;\n  return (\n    <div className='gifDiv tc dib br2 pa2 ma2 grow bw2 shadow-5'>\n      <iframe className='iframeEle' src={url.embed_url} key={url.id}></iframe>\n    </div>\n  )\n}\n\nexport default Card;\n\n\n    /* {console.log(props.prop[0].embed_url)} */\n","import React from 'react';\nimport Card from './Card';\nimport 'tachyons';\n\nconst CardList = (props) => {\n  return (\n    <div className='tc'>\n      {\n        props.cards.map((user, i) => {\n          return <Card\n          key={user.id}\n          embed_url={user.embed_url} />\n        })\n      }\n    </div>\n  )\n}\n\nexport default CardList;\n\n// console.log(props.cards)\n","import React from 'react';\nimport './headerBar.css';\nimport 'tachyons';\n\n\nconst header = () => {\n\n  return(\n      <div className='headerBar'>\n        <h1 className='headerTitle tc'>GifExplorer</h1>\n      </div>\n  );\n}\n\nexport default header;\n","import React from 'react';\n\n\nconst Scroll = (props) => {\n  return(\n    <div style={{overflow: 'scroll', height: '75vh'}}>\n      {props.children};\n    </div>\n  );\n};\n\n\nexport default Scroll;\n","import React, { Component } from 'react';\nimport './searchBox.css';\nimport request from 'superagent';\n\n\nclass SearchBox extends Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.submitHandler = this.submitHandler.bind(this);\n\n    this.state = {\n      input: ''\n    };\n  }\n\n  submitHandler(event) {\n    event.preventDefault()\n    this.props.handlerFromParent(this.state.input);\n  }\n\n  handleChange(event) {\n    this.setState({\n      input: event.target.value\n    });\n    event.preventDefault()\n    event.persist()\n  }\n\n\n  render() {\n    return(\n        <form onSubmit={this.submitHandler} className='tc center pv3'>\n          <input\n            type='text'\n            id='theInput'\n            placeholder='Search Gifs!'\n            className='center tc input-reset ba b--black-20 pa3 mb2 db w-80'\n            onChange={this.handleChange}\n            />\n        </form>\n    );\n  }\n}\n\n\nexport default SearchBox;\n","import React from 'react';\nimport 'tachyons';\n\nconst CurrentlyViewing = (props) => {\n  let searchedTerm = null\n  if(props.current === ''){\n    searchedTerm = 'Trending'\n  } else{\n    searchedTerm = props.current\n  }\n\n  return(\n    <div>\n      <p className='f1 fw9 ph3 pv3'>{searchedTerm.toUpperCase()}</p>\n    </div>\n  )\n\n}\n\nexport default CurrentlyViewing;\n","import React, { Component } from 'react';\nimport request from 'superagent';\nimport CardList from './CardList';\nimport HeaderBar from './HeaderBar';\nimport Scroll from './SearchBar';\nimport SearchBox from './SearchBox';\nimport CurrentlyViewing from './CurrentlyViewing';\nimport './App.css';\nimport 'tachyons';\n\n  class App extends Component {\n    constructor(props) {\n      super(props);\n      this.handler = this.handler.bind(this)\n      this.state = {\n        gifs: [],\n        searchField: '',\n        searched: false\n      }\n    }\n\n      componentDidMount() {\n        if(this.state.searched === false) {\n          const url = 'https://api.giphy.com/v1/gifs/trending?api_key=21pGD8YTJeDH5f5I9HkUce2bfrSIXWXF&limit=12&rating=R'\n\n          request\n          .get(url, (err, res) => {\n            this.setState({gifs: res.body.data})\n          })\n          .withCredentials()\n        }\n      }\n\n\n    handler(data) {\n      this.setState({\n        searchField: data,\n        searched: true\n      });\n      const searchTerm = data\n      const url = `https://api.giphy.com/v1/gifs/search?q=${searchTerm}&api_key=21pGD8YTJeDH5f5I9HkUce2bfrSIXWXF&limit=69&rating=R`\n\n      request\n        .get(url, (err, res) => {\n          this.setState({gifs:res.body.data})\n        })\n        .withCredentials()\n      this.setState({searched:false})\n    }\n\n    render() {\n      if(this.state.gifs.length === 0) {\n        return null;\n      }\n      return (\n        <div className='view'>\n          <HeaderBar />\n          <SearchBox handlerFromParent={this.handler} />\n          <CurrentlyViewing current={this.state.searchField}/>\n          <Scroll>\n            <CardList cards={this.state.gifs} />\n          </Scroll>\n        </div>\n      );\n    }\n  }\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}